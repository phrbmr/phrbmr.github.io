current_dir <- file.path(getwd(), "")
print(current_dir)
current_dir <- file.path(getwd(), "")
print(current_dir)
# Número de linhas
martix(c(1,2,3,4,5,6), nr = 2)
# Número de linhas
matrix(c(1,2,3,4,5,6), nr = 2)
# Número de linhas
matrix(c(1,2,3,4,5,6), nr = 2)
matrix(c(1,2,3,4,5,6), nr = 3)
matrix(c(1,2,3,4,5,6), nr = 6)
# Número de colunas
matrix(c(1,2,3,4,5,6), nc = 2)
matrix(c(1,2,3,4,5), nr = 2)
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow = T)
# Criando matrizes a partir de vetores e preenchendo a partir das linhas
meus_dados = c(1:10)
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow = T)
matrix(data = meus_dados, nrow = 5, ncol = 2)
# Fatiando a Matriz
mat <- matrix(c(2,3,4,5), nr = 2)
mat[1,2]
mat[2,2]
mat[,2]
mat[1,3]
mat[,2]
# Criando uma matriz diagonal
matriz = 1:3
diag(matriz)
# Extraindo vetor de uma matriz diagonal
vetor = diag(matriz)
diag(vetor)
vetor
# Transposta da Matriz
w <- matrix(c(2,4,8,12), nr = 2, ncol = 2)
w
t(w)
U <- t(w)
u
U <- t(w)
u <- t(w)
u
# Transposta da Matriz
w <- matrix(c(2,4,8,12), nr = 2, ncol = 2)
w
t(w)
u <- t(w)
u
# Transposta da Matriz
w <- matrix(c(2,4,8,12), nr = 2, ncol = 2)
w
t(w)
# Matriz Inversa
solve(w)
mat2 <- matrix(c(6,7,8,9), nr = 2)
mat1 * mat2
# Multiplicando matrizes
mat1 <- matrix(c(2,3,4,5), nr = 2)
mat2 <- matrix(c(6,7,8,9), nr = 2)
mat1 * mat2
mat1 / mat2
mat1 + mat2
mat1 - mat2
# Multiplicando matriz com vetor
x = c(1:4)
mat1*x
dimnames(mat3) = list( c("Linha1", "Linha2"), c("Coluna1", "Coluna2"))
# Nomeando Matriz
mat3 <- matrix(c('Terra', 'Marte', 'Saturno', 'Netuno'), nr = 2)
dimnames(mat3) = list( c("Linha1", "Linha2"), c("Coluna1", "Coluna2"))
mar3
mat3
# Identificar no momento da criação
matrix(c(1,2,3,4), nr = 2, nc = 2, dimnames = list(c("Linha1", "Linha2"), c("Coluna1", "Coluna2")))
# Combinando matrizes
cbind(mat1, mat2)
# Combinando matrizes
cbind(mat1, mat2)
rbind(mat, mat2)
# Desconstruindo Matriz
c(mat3)
# Inicializando listas
lista_c1 = list('A', 'B', 'C')
lista_c2 = list(c('A', 'A'),'B', 'C')
lista_c3 = list(matrix(c('A', 'A', 'A', 'A'), nr = 2), 'B', 'C')
lista_c1
lista_c2
lista_c3
lista_i = list(2, 3, 4)
lista_f = list(1.9, 45.3, 300.5)
lista_com = list(5.2+3i, 2.4+8i)
lista_l = list(TRUE, FALSE, TRUE)
lista_i
lista_f
lista_com
lista_l
lista_l = list(TRUE, FALSE, TRUE, 'a')
lista_l
lista_composta1 = list('A', 3, TRUE)
lista_composta1
lista1 <- list(1:10, c("Zico", "Pelé", "Garrincha"), rnorm(10))
lista1
?rnorm
#Slicing de lista
lista1[1]
lista[2]
lista1[2]
lista1[[2]]
lista1[[2]][1]
lista1[[2]][2] = "Gabi"
lsita1
lista1
# Lista nomeada
names(lista1) <- c("inteiros", "caracteres", "numericos")
lista1
vec_char <- c('A', 'B', 'C', 'D')
lista2 <- list(Numeros = vec_num, Letras = vec_char)
vec_num <- 1:4
vec_char <- c('A', 'B', 'C', 'D')
lista2 <- list(Numeros = vec_num, Letras = vec_char)
lista2
lista2 <- list('Numeros' = vec_num, 'Letras' = vec_char)
lista2
lista2=0
lista2
lista2 <- list('Numeros' = vec_num, 'Letras' = vec_char)
lista2
lista2 <- list(elemento1 = 3:5), elemento2 = c(7.2,3.5)
lista2
lista2 <- list(elemento1 = 3:5, elemento2 = c(7.2,3.5)
lista2 <- list(elemento1 = 3:5, elemento2 = c(7.2,3.5))
lista2 <- list(elemento1 = 3:5, elemento2 = c(7.2,3.5))
lista2
# Trabalhando com elementos especificos da lista
lista1
lista$caracteres
lista1$caracteres
length(lista1$inteiros)
lista1$inteiros
lengh(lista1)
length(lista1)
lista1$inteiros[1]
lista1$inteiros[3]
installed.packages("ggplot2")
library("ggplot2")
# Preparando dados
data(tips, package = 'reshape2')
View(tips)
# Plotando um gráfico básico com qplot()
qplot(total_bill, tip, data = tips, geom = "point")
ggplot() + camada1
# Camada 1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + camada1
?aes
??aes
?ggplot
?aes
?aes
# Construindo um modelo de regressão
modelo_base <- lm(tip ~ total_bill, data = tips)
modelo_fit <- data.frame(
total_bill = tips$total_bill,total_bill,
predict(modelo_base, interval = "confidence")
)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(modelo_base, interval = "confidence")
)
head(modelo_fit)
?aes
ggplot() + camada1
ggplot() + camada2
# Camada 2
camada2 <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = "darkred"
)
ggplot() + camada2
ggplot() + camada1 + camada2
plot(modelo_fit)
?plot
?plot
# Camada 3
camada3 <- geom_ribbon(
mapping = aes(x = total_bill, ymin = lwr, ymax = upr),
data = modelo_fit,
alpha = 0.3
)
ggplot() + camada1 + camada2 + camada3
?aes
library("ggplot2")
# Preparando dados
data(tips, package = 'reshape2')
View(tips)
# Plotando um gráfico básico com qplot()
qplot(total_bill, tip, data = tips, geom = "point")
# Camada 1
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + camada1
?aes
?ggplot
?aes
# Construindo um modelo de regressão
modelo_base <- lm(tip ~ total_bill, data = tips)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(modelo_base, interval = "confidence")
)
head(modelo_fit)
# Camada 2
camada2 <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = "darkred"
)
ggplot() + camada1 + camada2
# Camada 3
camada3 <- geom_ribbon(
mapping = aes(x = total_bill, ymin = lwr, ymax = upr),
data = modelo_fit,
alpha = 0.3
)
ggplot() + camada1 + camada2 + camada3
# Versão final otimizada
ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
# Gravando o gráfico em um objeto
myplot <- ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
class(myplot)
print(myplot)
print(myplot)
# Scatter plot com linha de regressão
# Preparando dados
data = data.frame(cond = rep(c("Obs 1", "Obs 2"),
each = 10), var1 = 1:100 +
rnorm(100,sd = 9), var2 = 1:100 +
rnorm(100,sd = 16))
?rep
rep(c("Obs 1", "Obs 2"), each = 10)
# Scatter plot com linha de regressão
# Preparando dados
data = data.frame(cond = rep(c("Obs 1", "Obs 2"), each = 10),
var1 = 1:100 + norm(100,sd = 9),
var2 = 1:100 + rnorm(100,sd = 16))
data = data.frame(cond = rep(c("Obs 1", "Obs 2"), each = 10),
var1 = 1:100 + norm(100,sd = 9),
var2 = 1:100 + rnorm(100,sd = 16))
# Scatter plot com linha de regressão
# Preparando dados
data = data.frame(cond = rep(c("Obs 1", "Obs 2"), each = 10),
var1 = 1:100 + rnorm(100,sd = 9),
var2 = 1:100 + rnorm(100,sd = 16))
# Scatter plot
ggplot(data, aes(x = var, y = var)) +
geom_point(shape = 1) +
geom_smooth(method = lm, color = "red", se = FALSE)
# Scatter plot
ggplot(data, aes(x = var1, y = var2)) +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)
?geom_point
?geom_smooth
# Scatter plot
ggplot(data, aes(x = var1, y = var2)) +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)
# Scatter plot
ggplot(data, aes(x = var1, y = var2)) +
geom_smooth(method = lm , color = "red", se = FALSE)
?ggplot
?lm
?ggplot
?lm
?qplot
?ggplot
?geom_smooth
gc()
gc()
# Dados
data = data.frame(grupo = c("A ","B ","C ","D ") ,
valor = c(33,62,56,67) ,
num_obs = c(100,500,459,342))
# Gerando a massa de dados
data$right = cumsum(data$num_obs) + 30 * c(0:(nrow(data)-1))
data$left = data$right - data$num_obs
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right, ymax = valor,
colour = grupo, fill = grupo)) +
xlab("Número de Observações") +
ylab("Valor")
# Outro exemplo usando mtcars
head(mtcars)
ggplot(data = mtcars, aes(x = disp, y = mpg)) +
geom_point()
# Podemos mapear as cores nesse gráfico
ggplot(data = mtcars,
aes(x = disp, y = mpg, colour = as.factor(am))) +
geom_point()
# No entanto, tambem podemos mapear uma variável contínua à cor dos pontos:
ggplot(data = mtcars,
aes(x = disp, y = mpg, colour = cyl)) +
geom_point()
# Também podemos mapear o tamanho dos pontos à uma variável de interesse:
# A legenda é inserida no gráfico automaticamente
ggplot(data = mtcars,
aes(x = disp, y = mpg, colour = cyl, size = wt)) +
geom_point()
# Os geoms definem qual forma geométrica será utilizada para a visualização dos dados no gráfico.
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg)) +
geom_boxplot()
# Histogramas
ggplot(mtcars, aes(x = mpg), binwidth = 30) +
geom_histogram()
# Gráfico de Barras
ggplot(mtcars, aes(x = as.factor(cyl))) +
geom_bar()
#### 3. Web App ####
# Limpando o ambiente de trabalho
rm(list = ls())
gc()
# Importando as Bibliotecas que serão utilizadas
library(shiny)
library(plotly)
library(shinythemes)
library(rsconnect)
########## Dados ####
# Carrega o primeiro dataset limpo
dataset1 <- read.csv("datasets_limpos/dataset1.csv")
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
########## Dados ####
# Carrega o primeiro dataset limpo
dataset1 <- read.csv("datasets_limpos/dataset1.csv")
# Ajusta o tipo de dado de algumas colunas
dataset1$X..of.Subscribers.Q4.2021..Estimate. <-
as.numeric(gsub(",", "", dataset1$X..of.Subscribers.Q4.2021..Estimate.))
dataset1$Q4.2021.Revenue....Estimate. <-
as.numeric(gsub(",", "", dataset1$Q4.2021.Revenue....Estimate.))
# Cria dataframes filtrando os outliers
dataset1_scat_out <- filter(dataset1, Country != "United States")
dataset1_bar <- filter(dataset1, Country != "Switzerland")
dataset1_bar_out <- filter(dataset1_bar, Country != "South Africa")
# Carrega os datasets 2, 3 e 6
genre <- read.csv("datasets_limpos/dataset2.csv")
tree <- read.csv("datasets_limpos/dataset3.csv")
countries <- read.csv("datasets_limpos/dataset6.csv")
# Filtra a lista de países removendo valores NA
country_list <- filter(countries, is.na(parents))
########## UI - User Interface ##########
# https://rstudio.github.io/shinythemes/
# Nota: Usuários Windows devem remover este trecho da linha abaixo (incluindo a vírgula):
#                theme = shinytheme("cerulean"),
# Razão: Bug no Windows com o pacote shinythemes. Em outros SOs funciona normalmente.
ui <- navbarPage(theme = shinytheme("cerulean"),
"Big Data na Prática 2",
tabPanel("Visão Geral",
sidebarLayout(
sidebarPanel(
selectInput("select",
label = h4("Selecione a Variável do Eixo Y:"),
choices = list("Faturamento da Netflix Q4-2021" = "Q4.2021.Revenue....Estimate.",
"Assinaturas da Netflix Q4-2021" = "X..of.Subscribers.Q4.2021..Estimate.",
"Tamanho Total do Catálogo" = "Total.Library.Size",
"Preço da Assinatura Basic" = "Cost.Per.Month...Basic....",
"Preço da Assinatura Standard"= "Cost.Per.Month...Standard....",
"Preço da Assinatura Premium" = "Cost.Per.Month...Premium...."),
selected = 1),
checkboxInput("outlierscatter", "Mostrar Outlier", FALSE)),
mainPanel(
plotlyOutput("scatPlot")))
),
tabPanel("Desigualdade Salarial",
h4("Disparidade de Renda e Diferenças nos Preços da Assinatura Basic, Standard e Premium da Netflix (Mensal)"),
sidebarPanel(
checkboxInput("outlierbar", "Mostrar Outlier", FALSE)),
mainPanel(
plotlyOutput("barPlot"))
),
tabPanel("Gêneros Populares",
tabPanel("Country",
sidebarLayout(
sidebarPanel(
selectInput("Country",
label = h3("Selecione o País:"),
choices = country_list$labels,
selected = 1),
),
mainPanel(
h3("Popularidade de Gênero dos Filmes Por País"),
h5("Com base no número de vezes que um filme/programa de TV de um determinado gênero esteve no Top 10 semanal da Netflix em um país (Dados de Junho 2021-Março 2022)."),
plotlyOutput("countryPlot")
)
)
),
),
tabPanel("Assinantes Netflix",
sidebarLayout(
sidebarPanel(
selectInput("select3",
label = h3("Selecione a Escala:"),
choices = list("Faturamento Netflix Q4-2021" = "Q4.2021.Revenue....Estimate.",
"Assinaturas Netflix Q4-2021" = "X..of.Subscribers.Q4.2021..Estimate."),
selected = 1),
checkboxInput("outliermap", "Mostrar Outlier", FALSE),),
mainPanel(
plotlyOutput("mapPlot"),
h3("Faturamento x Assinaturas"),
plotlyOutput("mapscatPlot")),
)
)
)
########## Server - Lógica do Servidor ##########
server <- function(input, output) {
# Scatter Plot
output$scatPlot <- renderPlotly({
if (input$outlierscatter){
dfs <- dataset1
} else {
dfs <- dataset1_scat_out
}
fig <- plot_ly(data = dfs, x = ~X2020.GDP..World.Bank., y = ~get(input$select), type = "scatter", mode = "markers", text = ~Country)
fig <- fig %>% layout(yaxis = list(title = 'Variável Selecionada'), xaxis = list(title = 'PIB (USD)'))
fig
})
# Bar Plot
output$barPlot <- renderPlotly({
if (input$outlierbar){
dfb <- dataset1_bar
} else {
dfb <- dataset1_bar_out
}
fig <- plot_ly(dfb, x = ~gini_disp, y = ~Cost.Per.Month...Basic...., type = 'bar', name = 'Basic', text = ~Country)
fig <- fig %>% add_trace(y = ~basic_standard_diff, name = 'Standard')
fig <- fig %>% add_trace(y = ~standard_premium_diff, name = 'Premium')
fig <- fig %>% layout(yaxis = list(title = 'Custo Mensal dos Planos Basic, Standard e Premium (USD)', titlefont = list(size=10)), xaxis = list(title = 'Desigualdade Salarial (GINI)'), barmode = 'stack')
fig
})
# Country Plot
output$countryPlot <- renderPlotly({
country <- filter(countries, parents == input$Country)
country <- rbind(filter(countries, labels == input$Country), country)
fig <- plot_ly(country, ids = ~id, labels = ~labels, parents = ~parents, values = ~n, type = 'treemap', branchvalues = 'total', pathbar = list(visible = TRUE))
fig
})
# Treemap Plot
output$treePlot <- renderPlotly({
fig <- plot_ly(tree, ids = ~id, labels = ~label, parents = ~parent, values = ~n, type = 'treemap', branchvalues = 'total', pathbar = list(visible = TRUE))
fig
})
# Mapa
output$mapPlot <- renderPlotly({
if (input$outliermap){
dfm <- dataset1
} else {
dfm <- dataset1_scat_out
}
l <- list(color = toRGB("grey"), width = 0.5)
# https://en.wikipedia.org/wiki/List_of_map_projections
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'Miller')
)
fig <- plot_geo(dfm)
fig <- fig %>% add_trace(z = ~get(input$select3),
color = ~get(input$select3),
colorscale = 'Purples',
text = ~Country,
locations = ~Alpha.3.code,
marker = list(line = l))
fig <- fig %>% colorbar(title = 'Escala')
fig <- fig %>% layout(title = 'Mapa Global da Netflix em Q4-2021')
fig
})
# Scatter Plot
output$mapscatPlot <- renderPlotly({
if (input$outliermap){
dfms <- dataset1
} else {
dfms <- dataset1_scat_out
}
fig <- plot_ly(data = dfms, x = ~X..of.Subscribers.Q4.2021..Estimate., y = ~Q4.2021.Revenue....Estimate., type = "scatter", mode = "markers", text = ~Country)
fig <- fig %>% layout(yaxis = list(title = 'Faturamento da Netflix em Q4-2021'), xaxis = list(title = 'Assinantes da Netflix em Q4-2021'))
fig
})
}
## Executa a app ####
shinyApp(ui, server)
rsconnect::deployApp('D:/GitHub/phrbmr.github.io/projects/Bigdata2')
